import React from 'react';
import { observer } from 'mobx-react-lite';
import { Toolbar } from 'polotno/toolbar/toolbar';
import { CustomFontSelector } from './CustomFontSelector';

/**
 * Ëá™ÂÆö‰πâÂ∑•ÂÖ∑Ê†è - ÊõøÊç¢ÈªòËÆ§Â≠ó‰ΩìÈÄâÊã©Âô®‰∏∫Ëá™ÂÆö‰πâÂ≠ó‰ΩìÈÄâÊã©Âô®
 */
export const CustomToolbar = observer(({ store }) => {
  const toolbarRef = React.useRef(null);

  React.useEffect(() => {
    console.log('üîß CustomToolbar: ÂàùÂßãÂåñËá™ÂÆö‰πâÂ∑•ÂÖ∑Ê†è');

    // ÊõøÊç¢ Polotno ÈªòËÆ§ÁöÑÂ≠ó‰ΩìÈÄâÊã©Âô®‰∏∫Ëá™ÂÆö‰πâÈÄâÊã©Âô®
    const replaceDefaultFontSelector = () => {
      // Êü•ÊâæÂ∑•ÂÖ∑Ê†è‰∏≠ÁöÑÂ≠ó‰ΩìÈÄâÊã©Âô®Ôºàselect ÂÖÉÁ¥†Ôºâ
      const selects = document.querySelectorAll('.polotno-toolbar select, nav select');

      selects.forEach(select => {
        // Ê£ÄÊü•ÊòØÂê¶ÊòØÂ≠ó‰ΩìÈÄâÊã©Âô®ÔºàÂåÖÂê´Â≠ó‰ΩìÈÄâÈ°πÔºâ
        const options = select.querySelectorAll('option');
        let isFontSelector = false;

        options.forEach(option => {
          const text = option.textContent || '';
          // Ê£ÄÊµãÂ∏∏ËßÅÂ≠ó‰ΩìÂêçÁß∞
          if (text.includes('Arial') || text.includes('Roboto') || text.includes('Open Sans')) {
            isFontSelector = true;
          }
        });

        if (isFontSelector) {
          console.log('üîç ÊâæÂà∞ÈªòËÆ§Â≠ó‰ΩìÈÄâÊã©Âô®ÔºåÈÄâÈ°πÊï∞Èáè:', options.length);
          console.log('üìã ÈªòËÆ§Â≠ó‰ΩìÁ§∫‰æã:', Array.from(options).slice(0, 3).map(o => o.textContent));

          // ÊâæÂà∞Â≠ó‰ΩìÈÄâÊã©Âô®ÁöÑÁà∂ÂÆπÂô®
          const container = select.closest('div');
          if (container && !container.querySelector('.custom-font-selector-injected')) {
            console.log('‚úÖ ÂáÜÂ§áÊ≥®ÂÖ•Ëá™ÂÆö‰πâÂ≠ó‰ΩìÈÄâÊã©Âô®');

            // ÂÆåÂÖ®ÁßªÈô§ÂéüÂßã selectÔºàËÄå‰∏çÊòØÈöêËóèÔºâ
            select.remove();
            console.log('üóëÔ∏è Â∑≤ÁßªÈô§ÈªòËÆ§Â≠ó‰ΩìÈÄâÊã©Âô®');

            // ÂàõÂª∫Ëá™ÂÆö‰πâÂ≠ó‰ΩìÈÄâÊã©Âô®ÁöÑÂÆπÂô®
            const customSelectorContainer = document.createElement('div');
            customSelectorContainer.className = 'custom-font-selector-injected';
            customSelectorContainer.id = 'custom-font-selector-mount';
            customSelectorContainer.style.display = 'inline-block';

            // Â∞ÜËá™ÂÆö‰πâÈÄâÊã©Âô®ÊèíÂÖ•Âà∞Âéü‰ΩçÁΩÆ
            container.appendChild(customSelectorContainer);

            console.log('‚úÖ Ëá™ÂÆö‰πâÂ≠ó‰ΩìÈÄâÊã©Âô®ÂÆπÂô®Â∑≤Ê≥®ÂÖ•Âà∞Â∑•ÂÖ∑Ê†èÔºåID:', customSelectorContainer.id);
          }
        }
      });
    };

    // Âª∂ËøüÊâßË°å‰ª•Á°Æ‰øù Polotno Toolbar Â∑≤Ê∏≤Êüì
    const timer = setTimeout(replaceDefaultFontSelector, 500);

    // ‰ΩøÁî® MutationObserver ÁõëÂê¨ DOM ÂèòÂåñÔºàÂΩìÈÄâÊã©‰∏çÂêåÂÖÉÁ¥†Êó∂Â∑•ÂÖ∑Ê†è‰ºöÈáçÊñ∞Ê∏≤ÊüìÔºâ
    const observer = new MutationObserver(() => {
      replaceDefaultFontSelector();
    });

    const toolbar = document.querySelector('.polotno-toolbar-container, nav');
    if (toolbar) {
      observer.observe(toolbar, {
        childList: true,
        subtree: true,
      });
    }

    return () => {
      clearTimeout(timer);
      observer.disconnect();
    };
  }, []);

  // ‰ΩøÁî® Portal Â∞ÜËá™ÂÆö‰πâÂ≠ó‰ΩìÈÄâÊã©Âô®Ê≥®ÂÖ•Âà∞Â∑•ÂÖ∑Ê†è‰∏≠
  React.useEffect(() => {
    let root = null;

    const renderCustomSelector = () => {
      const mountPoint = document.getElementById('custom-font-selector-mount');

      if (mountPoint) {
        console.log('üéØ ÊâæÂà∞ÊåÇËΩΩÁÇπÔºåÂáÜÂ§áÊ∏≤ÊüìËá™ÂÆö‰πâÂ≠ó‰ΩìÈÄâÊã©Âô®');

        // Ê∏ÖÁ©∫ÊåÇËΩΩÁÇπ
        mountPoint.innerHTML = '';

        // Âä®ÊÄÅÂØºÂÖ• ReactDOM Âπ∂Ê∏≤Êüì
        import('react-dom/client').then(({ createRoot }) => {
          root = createRoot(mountPoint);
          root.render(<CustomFontSelector store={store} />);
          console.log('‚úÖ Ëá™ÂÆö‰πâÂ≠ó‰ΩìÈÄâÊã©Âô®Â∑≤ÊàêÂäüÊ∏≤Êüì');
        }).catch(err => {
          console.error('‚ùå Ê∏≤ÊüìÂ§±Ë¥•:', err);
        });
      } else {
        console.warn('‚ö†Ô∏è Êú™ÊâæÂà∞ÊåÇËΩΩÁÇπ #custom-font-selector-mount');
      }
    };

    // Âª∂ËøüÊ∏≤ÊüìÔºåÁ°Æ‰øùÊåÇËΩΩÁÇπÂ∑≤ÂàõÂª∫
    const timer = setTimeout(renderCustomSelector, 600);

    // ÁõëÂê¨ÊåÇËΩΩÁÇπÂá∫Áé∞
    const observer = new MutationObserver(() => {
      if (document.getElementById('custom-font-selector-mount') && !root) {
        renderCustomSelector();
      }
    });

    observer.observe(document.body, {
      childList: true,
      subtree: true,
    });

    return () => {
      clearTimeout(timer);
      observer.disconnect();
      if (root) {
        root.unmount();
      }
    };
  }, [store]);

  return (
    <div ref={toolbarRef} style={{ width: '100%' }}>
      {/* Polotno ÈªòËÆ§Â∑•ÂÖ∑Ê†è */}
      <Toolbar store={store} />
    </div>
  );
});
