/**
 * Âº∫Âà∂ÊâÄÊúâ option ÂÖÉÁ¥†‰ΩøÁî®ÈªëËâ≤ÊñáÂ≠ó
 * Ëøô‰∏™ËÑöÊú¨‰ºöÊåÅÁª≠ÁõëÊéßÂπ∂Âº∫Âà∂Â∫îÁî®Ê†∑Âºè
 */

export const forceOptionBlack = () => {
  console.log('%cüî® Âº∫Âà∂ option ÈªëËâ≤ÊñáÂ≠óÂ∑•ÂÖ∑ÂêØÂä®', 'background: #dc3545; color: white; padding: 8px; font-weight: bold;');

  const forceBlackStyle = () => {
    // Ëé∑ÂèñÊâÄÊúâ option ÂÖÉÁ¥†
    const allOptions = document.querySelectorAll('option');

    if (allOptions.length === 0) {
      return;
    }

    console.log(`üîç ÊâæÂà∞ ${allOptions.length} ‰∏™ option ÂÖÉÁ¥†ÔºåÊ≠£Âú®Âº∫Âà∂Â∫îÁî®ÈªëËâ≤Ê†∑Âºè...`);

    allOptions.forEach((option, index) => {
      // ÂÆåÂÖ®ÁßªÈô§ÂÜÖËÅîÊ†∑Âºè
      option.removeAttribute('style');

      // ÁßªÈô§ÂèØËÉΩÂØºËá¥È¢úËâ≤ÂèòÂåñÁöÑ class
      const classList = Array.from(option.classList);
      classList.forEach(className => {
        if (className.includes('color') || className.includes('font')) {
          option.classList.remove(className);
        }
      });

      // ‰ΩøÁî®ÊúÄÂº∫ÁöÑÊñπÂºèËÆæÁΩÆÊ†∑Âºè
      const styleText = `
        color: #000000 !important;
        -webkit-text-fill-color: #000000 !important;
        -moz-text-fill-color: #000000 !important;
        background-color: #ffffff !important;
        background: #ffffff !important;
        background-image: none !important;
        font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", sans-serif !important;
        font-weight: 700 !important;
        font-size: 14px !important;
        padding: 10px 12px !important;
        opacity: 1 !important;
        text-shadow: none !important;
      `;

      option.setAttribute('style', styleText);

      // ÂÜçÊ¨°‰ΩøÁî® style.setProperty Á°Æ‰øùË¶ÜÁõñ
      option.style.setProperty('color', '#000000', 'important');
      option.style.setProperty('-webkit-text-fill-color', '#000000', 'important');
      option.style.setProperty('-moz-text-fill-color', '#000000', 'important');
      option.style.setProperty('background-color', '#ffffff', 'important');
      option.style.setProperty('background', '#ffffff', 'important');
      option.style.setProperty('font-family', 'system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", sans-serif', 'important');
      option.style.setProperty('font-weight', '700', 'important');

      if (index < 5) {
        console.log(`  ‚úÖ Option #${index + 1}: "${option.textContent.trim().substring(0, 20)}..." - Âº∫Âà∂ÈªëËâ≤`);
      }
    });

    console.log(`‚úÖ Â∑≤Âº∫Âà∂Â∫îÁî®ÈªëËâ≤Ê†∑ÂºèÂà∞ÊâÄÊúâ ${allOptions.length} ‰∏™ option ÂÖÉÁ¥†`);
  };

  // Á´ãÂç≥ÊâßË°å
  forceBlackStyle();

  // Âª∂ËøüÊâßË°åÂ§öÊ¨°ÔºåÁ°Æ‰øùË¶ÜÁõñÂä®ÊÄÅÂä†ËΩΩÁöÑÂÜÖÂÆπ
  setTimeout(forceBlackStyle, 100);
  setTimeout(forceBlackStyle, 300);
  setTimeout(forceBlackStyle, 500);
  setTimeout(forceBlackStyle, 1000);
  setTimeout(forceBlackStyle, 2000);
  setTimeout(forceBlackStyle, 3000);

  // ÊØè 300ms ÊåÅÁª≠Âº∫Âà∂Â∫îÁî®
  setInterval(forceBlackStyle, 300);

  // ÁõëÂê¨ DOM ÂèòÂåñ
  const observer = new MutationObserver((mutations) => {
    let hasOptionChanges = false;

    mutations.forEach(mutation => {
      if (mutation.type === 'childList') {
        mutation.addedNodes.forEach(node => {
          if (node.nodeType === 1) {
            if (node.tagName === 'OPTION' || node.tagName === 'SELECT') {
              hasOptionChanges = true;
            } else if (node.querySelectorAll) {
              const options = node.querySelectorAll('option');
              if (options.length > 0) {
                hasOptionChanges = true;
              }
            }
          }
        });
      }

      // ÁõëÂê¨ option ÂÖÉÁ¥†ÁöÑÂ±ûÊÄßÂèòÂåñ
      if (mutation.type === 'attributes' && mutation.target.tagName === 'OPTION') {
        hasOptionChanges = true;
      }
    });

    if (hasOptionChanges) {
      console.log('üîÑ Ê£ÄÊµãÂà∞ option ÂÖÉÁ¥†ÂèòÂåñÔºåÁ´ãÂç≥ÈáçÊñ∞Â∫îÁî®Ê†∑Âºè');
      forceBlackStyle();
      setTimeout(forceBlackStyle, 50);
      setTimeout(forceBlackStyle, 100);
    }
  });

  observer.observe(document.body, {
    childList: true,
    subtree: true,
    attributes: true,
    attributeFilter: ['style', 'class']
  });

  // ÁõëÂê¨ÊâÄÊúâ select ÁöÑÁÑ¶ÁÇπÂíåÁÇπÂáª‰∫ã‰ª∂
  document.addEventListener('focus', (e) => {
    if (e.target.tagName === 'SELECT') {
      console.log('üéØ Select Ëé∑ÂæóÁÑ¶ÁÇπÔºåÂº∫Âà∂Â∫îÁî®Ê†∑Âºè');
      forceBlackStyle();
      setTimeout(forceBlackStyle, 10);
      setTimeout(forceBlackStyle, 50);
    }
  }, true);

  document.addEventListener('click', (e) => {
    if (e.target.tagName === 'SELECT' || e.target.closest('select')) {
      console.log('üéØ Select Ë¢´ÁÇπÂáªÔºåÂº∫Âà∂Â∫îÁî®Ê†∑Âºè');
      forceBlackStyle();
      setTimeout(forceBlackStyle, 10);
      setTimeout(forceBlackStyle, 50);
    }
  }, true);

  console.log('‚úÖ Âº∫Âà∂ option ÈªëËâ≤ÊñáÂ≠óÂ∑•ÂÖ∑Â∑≤ÂêØÂä®Âπ∂ÊåÅÁª≠ÁõëÊéß');

  return () => {
    observer.disconnect();
  };
};
